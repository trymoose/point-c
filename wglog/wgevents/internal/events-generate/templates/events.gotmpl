{{- /*gotype:github.com/trymoose/point-c/wglog/wgevents/internal/events-generate.Dot*/ -}}
// Code generated by events-generate; DO NOT EDIT.
package {{ .Package }}

import (
    {{ range .Imports }}"{{ . }}"
{{ end -}}
)

var parser Parser

type Parser interface {
{{ range .Custom }}Parse{{ .Name }}(*Event{{ .Name }}, string, ...any) bool
{{ end -}}
}


// Errorf formats
{{ template "uniqueFormatMap.gotmpl" .Errorf }}

// Verbosef formats
{{ template "uniqueFormatMap.gotmpl" .Verbosef }}

type Event interface {
	Nice() string
	Format() string
	Args() []any
    Slog(*slog.Logger)
	IsErrorf() bool
}

{{ range .Events }}
    {{ template "eventType.gotmpl" . }}
{{ end }}

type EventAny struct {
    format string
    args []any
    error bool
}

func (e *EventAny) Format() string {return e.format}
func (e *EventAny) Args() []any {return e.args}
func (e *EventAny) Nice() string {return fmt.Sprintf(e.Format(), e.Args()...)}
func (e *EventAny) IsErrorf() bool {return e.error}
func (e *EventAny) Slog(l *slog.Logger) {
    if e.error {
        l.Error(e.Nice())
    } else {
        l.Debug(e.Nice())
    }
}

func Events(e chan<- Event) *device.Logger {
    return &device.Logger{
        Verbosef: func(format string, args ...any) {
            {{ template "logfn.gotmpl" isError .Verbosef false }}
        },
        Errorf:   func(format string, args ...any) {
            {{ template "logfn.gotmpl" isError .Errorf true }}
        },
    }
}